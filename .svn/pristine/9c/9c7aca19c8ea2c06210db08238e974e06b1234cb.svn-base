<%@ page language="java" contentType="text/html; charset=UTF-8"
pageEncoding="UTF-8"%> <%@ taglib uri="http://java.sun.com/jsp/jstl/core"
prefix="c" %>
<style>
  .chatting-area {
    border: 1px solid black;
    margin: auto;
  }

  #exit-area {
    text-align: right;
    margin-bottom: 10px;
  }

  .display-chatting {
    width: 100%;
    height: 300px;
    border: 1px solid black;
    overflow: auto;
    /*스크롤 처럼*/
    list-style: none;
    padding: 10px 10px;
    z-index: 1;
  }

  .chat {
    display: inline-block;
    border-radius: 5px;
    padding: 5px;
    background-color: #eee;
  }

  .input-area {
    width: 100%;
    display: flex;
  }

  #inputChatting {
    width: 80%;
    resize: none;
  }

  #send {
    width: 20%;
  }

  .myChat {
    text-align: right;
  }

  .myChat > p {
    background-color: gold;
  }

  .chatDate {
    font-size: 10px;
  }

  .img {
    width: 100%;
    height: 100%;
    position: relative;
    z-index: -100;
  }
</style>

<input type="button" value="입장" name="chatBtn" onclick="openSocket();" />

<c:out value="${userVo.userNo}"></c:out>
<c:out value="${userVo.userNm}"></c:out>
--
<input type="text" id="sender" value="${userVo.userNo}" style="display: none" />
<input
  type="hidden"
  id="senderId"
  value="${userVo.userNm}"
  style="display: none"
/>
<input type="hidden" id="projNo" value="${projNo}" style="display: none" />

<div class="card">
  <div class="chatting-area" id="chatting-area">
    <div id="exit-area">
      <button id="exit-btn" onclick="closeSocket();">나가기</button>
    </div>

    <ul class="display-chatting" id="messages"></ul>

    <div class="input-area">
      <input type="text" id="messageinput" />
      <button id="send" type="button" onclick="send();">보내기</button>
    </div>
  </div>
</div>

<script type="text/javascript">
  var ws;
  var messages = document.getElementById("messages");

  function openSocket() {
    //웹소켓 객체 만드는 코드
    ws = new WebSocket("ws://localhost:80/chatting");

    ws.onopen = function (event) {
      console.log("채팅방 연결 성공");

      const sender = document.getElementById("sender").value;
      const senderId = document.getElementById("senderId").value;
      const projNo = document.getElementById("projNo").value;

      const data = {
        sender: sender,
        senderId: senderId,
      };

      ws.send(JSON.stringify(data));
    };

    ws.onmessage = function (event) {
      console.log("writeResponse");
      console.log(event.data);
      writeResponse(event.data);
    };

    ws.onclose = function (event) {
      writeResponse("대화 종료??");
    };
  }

  function send() {
    chatContent = document.getElementById("messageinput").value;

    let sender = document.getElementById("sender").value;
    let senderId = document.getElementById("senderId").value;
    let messageinput = document.getElementById("messageinput").value;
    let chatSendDate = new Date();

    var text = {
      stuNm: sender,
      stuNo: senderId,
      chatContent: messageinput,
      chatSendDate: chatSendDate,
    };

    ws.send(JSON.stringify(text));

    text = "";
  }

  function closeSocket() {
    ws.close();
  }

  function writeResponse(text) {
    messages.innerHTML += "<br/>" + text;
  }

  function clearText() {
    console.log(messages.parentNode);
    messages.parentNode.removeChild(messages);
  }
</script>
